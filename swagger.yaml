openapi: 3.0.0
info:
  description: |
    This is foodhub server for SE121 project.
  version: "1.0.0"
  title: Foodhub APIs
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "https://se-foodhub-7fdf668fb550.herokuapp.com/api"
    description: Production server
  - url: "http://localhost:8888/api"
    description: Local server
tags:
  - name: auth
    description: Auth APIs
  - name: product
    description: Product APIs
  - name: category
    description: Category APIs
  - name: user
    description: User APIs
  - name: order
    description: Order APIs
  - name: cart
    description: Cart APIs
  - name: file
    description: File upload/download APIs
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                  example: ""
      responses:
        "200":
          description: Successful login
        "401":
          description: Unauthorized
  /product/product_detail:
    get:
      tags:
        - product
      summary: Get a product by ID
      parameters:
        - name: product_id
          in: query
          description: ID of the product to return
          required: true
          schema:
            type: string
            format: uuid # If your product_id is a UUID
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
  /product/new_arrivals:
    get:
      tags:
        - product
      summary: Get new arrival products
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /product/best_seller:
    get:
      tags:
        - product
      summary: Get best seller products
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /product/exclusive:
    get:
      tags:
        - product
      summary: Get exclusive products
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /product/category:
    get:
      tags:
        - product
      summary: Get all products in a category
      parameters:
        - name: category_id
          in: query
          description: ID of the category to return products from
          required: true
          schema:
            type: string
            format: uuid # If your category_id is a UUID
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Category not found
  /product:
    get:
      summary: Search for products
      description: Fetch products by searching with a query term in their name.
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
          description: The search term to filter products by name.
      responses:
        200:
          description: List of matching products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Giỏ hoa tươi"
                    price:
                      type: number
                      format: float
                      example: 25.5
        400:
          description: Invalid search query
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid search query"
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error searching product"
  /category:
    get:
      tags:
        - category
      summary: Get all categories
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - category
      summary: Add a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
  /order/cart/{cartId}:
    post:
      tags:
        - order
      summary: Place an order from a cart
      parameters:
        - name: cartId
          in: path
          description: ID of the cart to place an order from
          required: true
          schema:
            $ref: "#/components/schemas/ObjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  description: Shipping address for the order
                  example: "123 Main Street, Springfield"
                paymentMethod:
                  $ref: "#/components/schemas/PaymentMethod"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input

  /user/profile:
    patch:
      tags:
        - user
      summary: Update user information
      description: Allows a user to update their profile information.
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user.
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                  example: john.doe@example.com
                facebookID:
                  type: string
                  description: The Facebook ID of the user.
                  example: 1234567890
                favouriteList:
                  type: object
                  description: The user's favorite items list.
                  example:
                    categories: ["Books", "Movies"]
                    items: ["The Great Gatsby", "Inception"]
                avatar:
                  type: string
                  description: The URL of the user's avatar.
                  example: https://example.com/avatar.jpg
                phoneNumber:
                  type: string
                  description: The user's phone number.
                  example: 0123456789
                address:
                  type: string
                  description: The user's address.
                  example: "123 Bến Thành, Quận 1"
      responses:
        '200':
          description: Successfully updated user information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User profile updated successfully."
        '400':
          description: Bad request. Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid input data."
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred while updating the profile."

      
  /user/favourite:
    post:
      tags:
        - user
      summary: Add a product to favorites
      parameters:
        - name: productId
          in: path
          description: ID of the product to add to favorites
          required: true
          schema:
            $ref: "#/components/schemas/ObjectId"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid input
    get:
      tags:
        - user
      summary: Get all favorite products
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /user/refreshToken:
    post:
      tags:
        - user
      summary: Refresh session ( included accessToken and refreshToken)
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string

  /order/createPaymentIntent:
    post:
      tags:
        - order
      description: Create payment url
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: Total amount to be paid in the smallest currency unit (e.g., cents for USD).
                  example: 15000
                currency:
                  type: string
                  description: ISO 4217 currency code (e.g., USD, EUR).
                  example: "VND"
                products:
                  type: array
                  description: List of products in the payment request.
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                        description: Unique identifier of the product.
                        example: "12345"
                      quantity:
                        type: integer
                        description: Quantity of the product.
                        example: 2
                      total:
                        type: number
                        format: float
                        description: Total price for this product in the smallest currency unit.
                        example: 10000
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The payment url.
                    example: "https://payment-url.com"
        "400":
          description: Invalid input or missing parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                        description: Type of error.
                        example: "invalid_request_error"
                      message:
                        type: string
                        description: Details of the error.
                        example: "Missing required param: amount."
                      param:
                        type: string
                        description: The parameter that caused the error.
                        example: "amount"
                      doc_url:
                        type: string
                        description: URL to Stripe's documentation for the error.
                        example: "https://stripe.com/docs/error-codes/parameter-missing"

  /bucket:
    get:
      tags:
        - file
      summary: Get all banners at Homepage
      description: Retrieve a list of all banner files in the specified bucket.
      parameters:
        - name: bucketName
          in: query
          description: Name of the storage bucket to retrieve files from.
          required: true
          schema:
            type: string
            example: banners
      responses:
        "200":
          description: Successful response with a list of banners.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    fileName:
                      type: string
                      description: Name of the banner file.
                      example: banner1.png
                    publicUrl:
                      type: string
                      description: Public URL of the banner file.
                      example: https://your-supabase-instance-url.storage/v1/object/public/banners/banner1.png
        "400":
          description: Invalid bucket name or missing parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "Bucket name is required."
        "404":
          description: Bucket or files not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "No files found in the specified bucket."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: "An unexpected error occurred."

components:
  schemas:
    ObjectId:
      type: string
      description: A unique identifier in MongoDB (24-character hexadecimal string)
      example: "60ad0aed9b1e8b9a2e8b9f4b"

    Product:
      type: object
      properties:
        productId:
          $ref: "#/components/schemas/ObjectId"
        productName:
          type: string
          description: Name of the product
          example: "Souvenir Mug"
        productImage:
          type: string
          description: URL or path to the product image
          example: "/images/mug.jpg"
        productPrice:
          type: number
          format: float
          description: Price of the product
          example: 12.99
        quantity:
          type: integer
          description: Quantity of the product in the cart
          example: 2
      required:
        - productId
        - productName
        - productImage
        - productPrice
        - quantity
    Cart:
      type: object
      properties:
        cartId:
          $ref: "#/components/schemas/ObjectId"
        userId:
          $ref: "#/components/schemas/ObjectId"
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the cart was created
          example: "2024-11-24T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the cart was last updated
          example: "2024-11-25T12:34:56.789Z"
      required:
        - cartId
        - userId
        - products
        - createdAt
        - updatedAt
    Category:
      type: object
      properties:
        categoryId:
          $ref: "#/components/schemas/ObjectId"
          nullable: true
          description: Unique identifier for the category (optional)
        categoryName:
          type: string
          description: Name of the category
          example: "Souvenirs"
        categoryImage:
          type: string
          nullable: true
          description: URL or path to the category image (optional)
          example: "/images/souvenirs.jpg"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the category was created
          example: "2024-11-24T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the category was last updated
          example: "2024-11-25T12:34:56.789Z"
      required:
        - categoryName
        - createdAt
        - updatedAt
    OrderProduct:
      type: object
      properties:
        productId:
          $ref: "#/components/schemas/ObjectId"
        productName:
          type: string
          description: Name of the product
          example: "Souvenir Mug"
        productImage:
          type: string
          description: URL or path to the product image
          example: "/images/mug.jpg"
        productPrice:
          type: number
          format: float
          description: Price of the product
          example: 12.99
        quantity:
          type: integer
          description: Quantity of the product in the order
          example: 2
      required:
        - productId
        - productName
        - productImage
        - productPrice
        - quantity
    Order:
      type: object
      properties:
        orderId:
          $ref: "#/components/schemas/ObjectId"
          nullable: true
          description: Unique identifier for the order (optional)
        userId:
          $ref: "#/components/schemas/ObjectId"
          description: Identifier of the user placing the order
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderProduct"
        totalPrice:
          type: number
          format: float
          description: Total price of the order
          example: 150.50
        orderStatus:
          $ref: "#/components/schemas/OrderStatus"
        address:
          type: string
          description: Shipping address for the order
          example: "123 Main Street, Springfield"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the order was created
          example: "2024-11-24T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the order was last updated
          example: "2024-11-25T12:34:56.789Z"
      required:
        - userId
        - products
        - totalPrice
        - orderStatus
        - address
        - paymentMethod
        - createdAt
        - updatedAt
    OrderStatus:
      type: string
      enum:
        - pending
        - processing
        - completed
        - cancelled
      description: Current status of the order
      example: "pending"

    PaymentMethod:
      type: string
      enum:
        - cash
        - creditCard
        - debitCard
        - paypal
        - googlePay
        - applePay
        - internetBanking
        - vnPay
        - momo
        - zaloPay
      description: Payment method used for the order
      example: "creditCard"
    User:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/ObjectId"
          description: Unique identifier for the user
        userName:
          type: string
          description: Name of the user
          example: "John Doe"
        userAvatar:
          type: string
          description: URL or path to the user's avatar image
          example: "/images/avatar.jpg"
        userEmail:
          type: string
          format: email
          description: Email address of the user
          example: "johndoe@example.com"
        userPassword:
          type: string
          description: The user's password (optional for read operations)
          example: "password123"
          nullable: true
        userPhone:
          type: string
          description: Phone number of the user
          example: "+1234567890"
        userAddress:
          type: string
          description: Shipping or billing address of the user
          example: "123 Main Street, Springfield"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2024-11-24T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: "2024-11-25T12:34:56.789Z"
        favouriteProducts:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
          description: A list of product IDs that the user has marked as favorites
          nullable: true
        forgetPasswordToken:
          type: string
          description: Token for password recovery
          nullable: true
          example: "random-token"
        forgetPasswordTokenExpire:
          type: string
          format: date-time
          description: Expiration date of the password recovery token
          nullable: true
          example: "2024-12-01T12:34:56.789Z"
        verificationToken:
          type: string
          description: Token used for email verification
          nullable: true
          example: "verification-token"
        verificationTokenExpire:
          type: string
          format: date-time
          description: Expiration date of the email verification token
          nullable: true
          example: "2024-12-01T12:34:56.789Z"
        verificationStatus:
          type: boolean
          description: Status of the user's email verification
          example: true
        refreshToken:
          type: string
          description: Refresh token for user authentication
          nullable: true
          example: "refresh-token"
        refreshTokenExpire:
          type: string
          format: date-time
          description: Expiration date of the refresh token
          nullable: true
          example: "2024-12-01T12:34:56.789Z"
      required:
        - userId
        - userName
        - userEmail
        - userPhone
        - userAddress
        - createdAt
        - updatedAt
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
